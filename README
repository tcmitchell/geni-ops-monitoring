This is GPO code for the GENI operational monitoring project.

For a description of what has changed in this release, see RELEASENOTES
in this directory.

For links to all documentation of the operational monitoring project, see:

  http://groups.geni.net/geni/wiki/OperationalMonitoring

This codebase is a set of reference components which fully or partially
implement parts of the monitoring component model listed at:

  http://www.gpolab.bbn.com/monitoring/components/

You can get more recent versions of this source by following the
directions here:

  http://trac.gpolab.bbn.com/ops-monitoring/wiki/GettingSourceCode

Current and past releases of this software are available here:

  http://software.geni.net/local-sw/

This directory contains one subdirectory for each component:
 * Directories which implement components of the ops monitoring model:
   * alerting/: reference alerting utilities 
   * collector/: reference collector 
   * schema/: schema/examples for datastore polling API
   * local/: reference local datastore 
 * Directories containing helper code:
   * common/: python libraries used by multiple components
   * config/: python configuration files used by multiple components
   * test/: generic utilities for testing code
   * cm/: configuration management utilities



======= Summary of all programs in the code base =======


 -- Local Datastore Database Handling Programs --

 * local/unit-tests/local_table_reset.py for reseting/initializing
   database tables at the local datastore

 * local/unit-tests/local_restart_node_interface_stats.py for
   populating the datastore's database with test data.  It uses
   local/stats_populator.py and local/info_populator.py classes


 -- External Check Datastore Data Generation Programs --

 * local/coordinate_mesoscale_experiments.py logs into a node of the
   monitoring sliver and calls the pinger program to record ping times
   across the mesoscale.  It grabs results from the pinger and inserts
   them into the database of the external check datastore.

 * local/unit-tests/pinger.py to be install along with
   local/unit-tests/ip_addresses.conf on a node called by the
   coordinate_mesoscale_experiments.py program to perform pings to
   addresses in ip_addresses.conf and write result tuples in a flat
   file for the coordinate_mesoscale_experiments.py to grab. 

 * local/extck_store.py this program populates a few of the basic
   tables at the external check store that are called during info
   queries (not time-series data queries). 

 * local/extck_populator.py this program populates the table
   ops_aggregate_is_available with time-series data about the
   health of the control plane.  This program requires omni to
   be configured in order to run because it actually calls 
   getVersion on each aggregate.


 -- Collector Programs that Collect Data --

 * collector/single_local_datastore_info_crawler.py - This program
   crawls a single datastore based on the arguments for what the
   crawler should look for.  This populates info tables (not
   time-series data tables).

 * collector/single_local_datastore_object_type_fetcher.py - This
   program fetches time-series data about objects of a single type out
   of a single datastore.  It is configured to query all event types
   for the requested objects' type.  It is configured to query all
   objects of the requested type.
 
 * collector/rest_call.py - This program sends a REST call to a datastore,
   prints the response, and validates it with validictory.  It can crawl an
   entire datastore either all at once or interactively.  Run with
   --help for more information.

 -- Collector Testing Programs --

 * collector/unit-tests/collector_table_reset.py - for reseting/initializing
   database tables at the collector.

 * collector/response_validator.py - Technically a set of functions
   that help determine if the json response from a datastore is
   formatted according to the json schema.


 -- Collector Nagios Programs --

 * collector/psql_queries.py - This is a program for Nagios sitting on
   top of the collector database.  It makes queries on behalf of Nagios.





All files are:

#----------------------------------------------------------------------
# Copyright (c) 2014 Raytheon BBN Technologies
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
#
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
#----------------------------------------------------------------------

