This README gives an overview of the programs in this directory.
Follow the ops-monitoring/collector/README to install and configure
packages to run these programs.

1. collector_table_reset.py

  This resets/initializes the table structure at the collector's
  database.  The program reads in opsconfig.json and creates tables in
  the "info" key with the db_schema present there in a straightforward
  manner.  

  The "events" key creates a tables named after the event
  type: ops_<object-type>_<event-name> where object-type is a "node"
  or "interface" and event-name is "mem_used_kb".  The columns of the
  event tables are all aggregate_id (really this is datastore_id), id
  for object id, ts for timestamp, and v which is of whatever type
  specified in the subdictionary of that event (as shown in the
  particular event sub-dictionary).


2. single_rest_call.py

  This program calls a datastore, prints the response, and validates
  it with validictory if the -v argument is provided.  Arguments to
  the program include:

  -v /path/to/validictory 
   For json-schema validation.  This should point to a git clone of this:
   https://github.com/sunlightlabs/validictory
  
  -u https://<path/to/datastore>/info/aggregate/<aggregate_id>
   This is the url to go to.  Often this can be the head aggregate info
   query as shown above.

  -c /path/to/tools-collector-cert 
   This is the certificate that is provided by the GPO for
   collectors. This does assumes this is a pass-phrase less key.


3.  multi_rest_call.py

  Essentially this is an extension of the single_rest_call.py program,
  but it reads each url from the response and prompts the user if
  he/she wants to continue crawling the datastore.  Arguments are the
  same (see above).